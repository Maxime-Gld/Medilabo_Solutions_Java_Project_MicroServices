services:
  # Base de données Mysql
  db:
    image: mysql:latest
    container_name: my_database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: admin
      MYSQL_PASSWORD: adminpassword
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./patient/src/main/resources/sql/initPatients.sql:/docker-entrypoint-initdb.d/data.sql

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    restart: always
    ports:
      - "9080:80"  # Port 8082 pour accéder à phpMyAdmin
    environment:
      PMA_HOST: db  # Nom du service MySQL dans le réseau Docker
      PMA_USER: admin 
      PMA_PASSWORD: adminpassword 
    depends_on:
      - db  # phpMyAdmin dépend du service MySQL et sera éxécuté après le service MySQL

  # mongoDb
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db

  # mongoExpress
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "9081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo

  # Microservice Back
  # back:
  #   build:
  #     context: ./back  # Chemin vers le dossier "back"
  #     dockerfile: Dockerfile
  #   container_name: back_service
  #   ports:
  #     - "8081:8081"
  #   expose:
  #     - "8081"
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/mydatabase
  #     SPRING_DATASOURCE_USERNAME: admin
  #     SPRING_DATASOURCE_PASSWORD: adminpassword
  #   depends_on:
  #     - db # Le microservice Back dépend du service MySQL et sera éxécuté après le service MySQL

volumes:
  db_data:
  mongo_data: